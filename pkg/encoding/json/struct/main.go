// pkg/encoding/json/struct.
package main

// TODO: impl

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"log"
	"os"
	"strings"
)

var jsonStreams = []string{
	`{}`,
	`[]`,
	`"string"`,
	`null`,
}

func decode(dec *json.Decoder, prev string) error {
	for {
		t, err := dec.Token()
		if err == io.EOF {
			break
		}
		if err != nil {
			return err
		}
		switch t.(type) {
		default:
			return fmt.Errorf("unexpected token: %+v", t)
		}
	}
	return nil
}

func Decode(j string) (src string, err error) {
	dec := json.NewDecoder(strings.NewReader(j))
	t, err := dec.Token()
	if err != nil {
		return "", err
	}
	lines := []string{"type AutoGenerated "}
	switch t.(type) {
	case json.Delim:
		switch t.(json.Delim).String() {
		case "{":
			lines[0] += "struct {"
			if dec.More() {
				// TODO: call decode
				lines = append(lines, "}")
			} else {
				lines[0] += "}"
			}
		case "[":
			lines[0] += "[]interface{"
			if dec.More() {
				// TODO: call decode
				lines = append(lines, "}")
			} else {
				lines[0] += "}"
			}
		default:
			return "", fmt.Errorf("unexpected delimiter: %+v", t)
		}
	case bool:
		lines[0] += "bool"
	case float64:
		// TODO: use json.Number
		lines[0] += "float64"
	case json.Number:
		// TODO: use
	case string:
		lines[0] += "string"
	case nil:
		lines[0] += "interface{}"
	default:
		return "", fmt.Errorf("unexpected token: %+v", t)
	}

	src = strings.Join(lines, "\n")
	log.Println(src)

	var buf bytes.Buffer
	node, err := parser.ParseExpr(src)
	if err != nil {
		return "", err
	}
	fset := token.NewFileSet()
	format.Node(&buf, fset, node)
	return buf.String(), nil
}

func run() error {
	for _, test := range jsonStreams {
		src, err := Decode(test)
		if err != nil {
			return err
		}
		fmt.Println(src)
	}
	return nil
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
